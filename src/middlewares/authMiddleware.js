import { JwtProvider } from '~/providers/JwtProvider'
import { env } from '~/config/environment'
import ApiError from '~/utils/ApiError'
import User from '~/models/User'

// Middleware n√†y ƒë·∫£m nhi·ªám vi·ªác quan tr·ªçng: X√°c th·ª±c JWT accessToken nh·∫≠n ƒë∆∞·ª£c t·ª´ ph√≠a FE c√≥ h·ª£p l·ªá hay kh√¥ng
const isAuthorized = async (req, res, next) => {
  // L√¢ÃÅy accessToken nƒÉÃÄm trong request cookies phiÃÅa client - withCredentials trong file authorizeAxios
  const clientAccessToken = req.cookies?.accessToken

  // N√™ÃÅu nh∆∞ clientAccessToken kh√¥ng t√¥ÃÄn taÃ£i thiÃÄ traÃâ v√™ÃÄ l√¥ÃÉi
  if (!clientAccessToken) {
    next(new ApiError(401, 'Unauthorized! (token not found)'))
    return
  }

  try {
    // Gi·∫£i m√£ token xem c√≥ h·ª£p l·ªá kh√¥ng
    const accessTokenDecoded = await JwtProvider.verifyToken(
      clientAccessToken,
      env.ACCESS_TOKEN_SECRET_SIGNATURE
    )
    // console.log('üöÄ ~ isAuthorized ~ accessTokenDecoded:', accessTokenDecoded)
    // L∆∞u th√¥ng tin gi·∫£i m√£ ƒë∆∞·ª£c v√†o req.jwtDecoded ƒë·ªÉ s·ª≠ d·ª•ng caÃÅc t√¢ÃÄng x∆∞Ãâ lyÃÅ sau
    req.jwtDecoded = accessTokenDecoded
    // Cho ph√©p request ƒëi ti·∫øp
    next()
  } catch (error) {
    // console.log('üöÄ ~ isAuthorized ~ error:', error)
    // N·∫øu token h·∫øt h·∫°n, tr·∫£ v·ªÅ m√£ l·ªói 410 ƒë·ªÉ FE g·ªçi API refreshToken
    if (error?.message?.includes('jwt expired')) {
      next(new ApiError(410, 'Need to refresh token.'))
      return
    }
    // N·∫øu token kh√¥ng h·ª£p l·ªá v√¨ l√Ω do kh√°c, tr·∫£ v·ªÅ 401 ƒë·ªÉ FE g·ªçi API sign_out
    next(new ApiError(401), 'Unauthorized!')
  }
}

// Middleware ki·ªÉm tra quy·ªÅn Admin
const isAdmin = async (req, res, next) => {
  try {
    // L·∫•y th√¥ng tin user t·ª´ token ƒë√£ ƒë∆∞·ª£c decode trong middleware isAuthorized
    const userId = req.jwtDecoded?.id

    if (!userId) {
      next(new ApiError(401, 'Unauthorized! User not found in token'))
      return
    }

    // L·∫•y th√¥ng tin user t·ª´ database ƒë·ªÉ ki·ªÉm tra role
    const user = await User.findByPk(userId)

    if (!user) {
      next(new ApiError(404, 'User not found'))
      return
    }

    // Ki·ªÉm tra quy·ªÅn admin
    if (user.role !== 'ADMIN') {
      next(new ApiError(403, 'Forbidden! Admin access required'))
      return
    }

    // L∆∞u th√¥ng tin user v√†o request ƒë·ªÉ s·ª≠ d·ª•ng ·ªü c√°c middleware ti·∫øp theo
    req.currentUser = user
    next()
  } catch {
    next(new ApiError(500, 'Internal server error'))
  }
}

export const authMiddleware = { isAuthorized, isAdmin }
